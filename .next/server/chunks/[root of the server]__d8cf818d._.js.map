{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/elevate/newPaddle/src/app/api/subscriptions/get-details/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport admin from 'firebase-admin';\n\n// Initialize Firebase Admin if not already initialized\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.applicationDefault(),\n  });\n}\n\nconst db = admin.firestore();\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { customerId, userId } = await req.json();\n\n    if (!customerId || !userId) {\n      return NextResponse.json(\n        { error: 'Customer ID and User ID are required' },\n        { status: 400 }\n      );\n    }\n\n    // Verify that the user making the request matches the userId\n    // This would typically be done with authentication middleware\n    // Here we're assuming the request is authenticated\n\n    // Query Firestore for transaction records with this customerId\n    const transactionsRef = db.collection('users').doc(userId).collection('transactions');\n    const snapshot = await transactionsRef\n      .where('customerId', '==', customerId)\n      .orderBy('createdAt', 'desc')\n      .limit(1)\n      .get();\n\n    if (snapshot.empty) {\n      return NextResponse.json(\n        { error: 'No subscription found for this customer' },\n        { status: 404 }\n      );\n    }\n\n    const subscriptionData = snapshot.docs[0].data();\n\n    return NextResponse.json({\n      subscriptionId: subscriptionData.subscriptionId,\n      status: subscriptionData.status,\n      planId: subscriptionData.planId,\n      nextBillDate: subscriptionData.nextBillDate,\n      customerId: subscriptionData.customerId,\n    });\n  } catch (error) {\n    console.error('Error fetching subscription details:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch subscription details' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,uDAAuD;AACvD,IAAI,CAAC,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,EAAE;IACtB,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;QAClB,YAAY,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,kBAAkB;IACjD;AACF;AAEA,MAAM,KAAK,2HAAA,CAAA,UAAK,CAAC,SAAS;AAEnB,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QAE7C,IAAI,CAAC,cAAc,CAAC,QAAQ;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,6DAA6D;QAC7D,8DAA8D;QAC9D,mDAAmD;QAEnD,+DAA+D;QAC/D,MAAM,kBAAkB,GAAG,UAAU,CAAC,SAAS,GAAG,CAAC,QAAQ,UAAU,CAAC;QACtE,MAAM,WAAW,MAAM,gBACpB,KAAK,CAAC,cAAc,MAAM,YAC1B,OAAO,CAAC,aAAa,QACrB,KAAK,CAAC,GACN,GAAG;QAEN,IAAI,SAAS,KAAK,EAAE;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0C,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,mBAAmB,SAAS,IAAI,CAAC,EAAE,CAAC,IAAI;QAE9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,gBAAgB,iBAAiB,cAAc;YAC/C,QAAQ,iBAAiB,MAAM;YAC/B,QAAQ,iBAAiB,MAAM;YAC/B,cAAc,iBAAiB,YAAY;YAC3C,YAAY,iBAAiB,UAAU;QACzC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuC,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}