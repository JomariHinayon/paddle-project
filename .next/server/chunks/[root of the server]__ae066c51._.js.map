{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/elevate/newPaddle/src/app/api/webhook/paddle/test/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nexport async function POST(req: Request) {\n  try {\n    // Read the raw body\n    const rawBody = await req.text();\n    \n    // Log everything we receive\n    console.log('TEST WEBHOOK - Headers:', JSON.stringify(Object.fromEntries([...req.headers])));\n    console.log('TEST WEBHOOK - Raw Body:', rawBody);\n    \n    try {\n      // Try to parse the body as JSON\n      const jsonBody = JSON.parse(rawBody);\n      console.log('TEST WEBHOOK - Parsed JSON:', JSON.stringify(jsonBody, null, 2));\n    } catch (e) {\n      console.log('TEST WEBHOOK - Not valid JSON');\n    }\n    \n    // Always return success for testing\n    return NextResponse.json({ \n      status: 'success',\n      message: 'Test webhook received and logged'\n    });\n  } catch (error) {\n    console.error('Test webhook error:', error);\n    return NextResponse.json({\n      status: 'error',\n      message: 'Error processing test webhook'\n    }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,oBAAoB;QACpB,MAAM,UAAU,MAAM,IAAI,IAAI;QAE9B,4BAA4B;QAC5B,QAAQ,GAAG,CAAC,2BAA2B,KAAK,SAAS,CAAC,OAAO,WAAW,CAAC;eAAI,IAAI,OAAO;SAAC;QACzF,QAAQ,GAAG,CAAC,4BAA4B;QAExC,IAAI;YACF,gCAAgC;YAChC,MAAM,WAAW,KAAK,KAAK,CAAC;YAC5B,QAAQ,GAAG,CAAC,+BAA+B,KAAK,SAAS,CAAC,UAAU,MAAM;QAC5E,EAAE,OAAO,GAAG;YACV,QAAQ,GAAG,CAAC;QACd;QAEA,oCAAoC;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,QAAQ;YACR,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,QAAQ;YACR,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}