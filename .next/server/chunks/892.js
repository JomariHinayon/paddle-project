exports.id=892,exports.ids=[892],exports.modules={78335:()=>{},96487:()=>{},97952:(e,t,s)=>{"use strict";s.d(t,{M2:()=>u,YA:()=>d});var a=s(46675),r=s.n(a),i=s(94612);let l=()=>(r().apps.length||r().initializeApp({credential:r().credential.cert({projectId:process.env.FIREBASE_PROJECT_ID,clientEmail:process.env.FIREBASE_CLIENT_EMAIL,privateKey:process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g,"\n")})}),r()),c=()=>l().firestore(),n=process.env.PADDLE_API_KEY,o=i.A.create({baseURL:"https://api.paddle.com",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"}});async function d(e,t,s){try{console.log(`Updating subscription ${e} to plan ${t} for user ${s}`);let a=c(),i=a.collection("subscriptions").doc(e);await i.set({updateStatus:"pending",updateRequested:r().firestore.FieldValue.serverTimestamp(),requestedPlanId:t,updatedAt:r().firestore.FieldValue.serverTimestamp()},{merge:!0});let l=await o.patch(`/subscriptions/${e}`,{items:[{price_id:t,quantity:1}]});if(console.log("Paddle subscription update response:",l.data),l.data?.data){let c=l.data.data;await i.set({updateStatus:"completed",planId:t,status:c.status,nextBillDate:c.next_billed_at?new Date(c.next_billed_at):null,updatedByApi:!0,updatedAt:r().firestore.FieldValue.serverTimestamp()},{merge:!0});let n=a.collection("users").doc(s).collection("subscriptions").doc(e);await n.set({planId:t,status:c.status,nextBillDate:c.next_billed_at?new Date(c.next_billed_at):null,updatedByApi:!0,updatedAt:r().firestore.FieldValue.serverTimestamp()},{merge:!0});let o=a.collection("users").doc(s);return await o.set({currentPlan:t,subscriptionStatus:c.status,nextBillDate:c.next_billed_at?new Date(c.next_billed_at):null,lastUpdated:r().firestore.FieldValue.serverTimestamp()},{merge:!0}),console.log(`Subscription plan updated successfully to ${t} for subscription ${e}`),{success:!0,subscription:c,message:"Subscription updated successfully"}}throw Error("Invalid response from Paddle API")}catch(s){console.error("Error updating subscription plan:",s);let t=c().collection("subscriptions").doc(e);return await t.set({updateStatus:"failed",updateError:s.message||"Unknown error",updatedAt:r().firestore.FieldValue.serverTimestamp()},{merge:!0}),{success:!1,error:s.message||"Failed to update subscription",details:s.response?.data||{}}}}async function u(e,t,s=!1){try{console.log(`Cancelling subscription ${e} for user ${t}. Immediate: ${s}`);let a=c(),i=a.collection("subscriptions").doc(e);await i.set({cancelStatus:"pending",cancelRequested:r().firestore.FieldValue.serverTimestamp(),cancelImmediately:s,updatedAt:r().firestore.FieldValue.serverTimestamp()},{merge:!0});let l=await o.post(`/subscriptions/${e}/cancel`,{effective_from:s?"immediately":"next_billing_period"});if(console.log("Paddle subscription cancellation response:",l.data),l.data?.data){let s=l.data.data;await i.set({cancelStatus:"completed",status:"canceled",canceledAt:r().firestore.FieldValue.serverTimestamp(),cancellationEffectiveDate:s.scheduled_change?.effective_at?new Date(s.scheduled_change.effective_at):null,updatedByApi:!0,updatedAt:r().firestore.FieldValue.serverTimestamp()},{merge:!0});let c=a.collection("users").doc(t).collection("subscriptions").doc(e);await c.set({status:"canceled",canceledAt:r().firestore.FieldValue.serverTimestamp(),cancellationEffectiveDate:s.scheduled_change?.effective_at?new Date(s.scheduled_change.effective_at):null,updatedByApi:!0,updatedAt:r().firestore.FieldValue.serverTimestamp()},{merge:!0});let n=a.collection("users").doc(t);return await n.set({subscriptionStatus:"canceled",subscriptionCanceledAt:r().firestore.FieldValue.serverTimestamp(),lastUpdated:r().firestore.FieldValue.serverTimestamp()},{merge:!0}),console.log(`Subscription ${e} cancelled successfully`),{success:!0,subscription:s,message:"Subscription cancelled successfully"}}throw Error("Invalid response from Paddle API")}catch(s){console.error("Error cancelling subscription:",s);let t=c().collection("subscriptions").doc(e);return await t.set({cancelStatus:"failed",cancelError:s.message||"Unknown error",updatedAt:r().firestore.FieldValue.serverTimestamp()},{merge:!0}),{success:!1,error:s.message||"Failed to cancel subscription",details:s.response?.data||{}}}}}};