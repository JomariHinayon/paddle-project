{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/elevate/.ssh/paddle-project/src/lib/firebase-admin.ts"],"sourcesContent":["import admin from 'firebase-admin';\n\n// Initialize Firebase Admin if not already initialized\nexport const getFirebaseAdmin = () => {\n  if (!admin.apps.length) {\n    const privateKey = process.env.FIREBASE_PRIVATE_KEY;\n    admin.initializeApp({\n      credential: admin.credential.cert({\n        projectId: process.env.FIREBASE_PROJECT_ID,\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n        privateKey: privateKey ? privateKey.replace(/\\\\n/g, '\\n') : '',\n      }),\n    });\n  }\n  return admin;\n};\n\n// Helper to get auth instance\nexport const getAuth = () => getFirebaseAdmin().auth();\n\n// Helper to get Firestore instance\nexport const getFirestore = () => getFirebaseAdmin().firestore();\n"],"names":[],"mappings":";;;;;AAAA;;AAGO,MAAM,mBAAmB;IAC9B,IAAI,CAAC,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,EAAE;QACtB,MAAM,aAAa,QAAQ,GAAG,CAAC,oBAAoB;QACnD,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;YAClB,YAAY,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;gBAChC,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,aAAa,WAAW,OAAO,CAAC,QAAQ,QAAQ;YAC9D;QACF;IACF;IACA,OAAO,2HAAA,CAAA,UAAK;AACd;AAGO,MAAM,UAAU,IAAM,mBAAmB,IAAI;AAG7C,MAAM,eAAe,IAAM,mBAAmB,SAAS","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///Users/elevate/.ssh/paddle-project/src/app/api/auth/session/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getAuth } from '@/lib/firebase-admin';\n\n// Set session expiration to 14 days (2 weeks)\nconst SESSION_EXPIRATION = 60 * 60 * 24 * 14 * 1000;\n\n// Configure this route to use Node.js runtime\nexport const runtime = 'nodejs';\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Get the ID token from the request body\n    const { idToken } = await req.json();\n\n    if (!idToken) {\n      return NextResponse.json(\n        { error: 'ID token is required' },\n        { status: 400 }\n      );\n    }\n\n    // Create a session cookie using the ID token\n    const auth = getAuth();\n    const sessionCookie = await auth.createSessionCookie(idToken, {\n      expiresIn: SESSION_EXPIRATION,\n    });\n\n    // Set the session cookie in the response\n    const response = NextResponse.json({ success: true });\n    \n    // Set the cookie with appropriate security settings\n    response.cookies.set({\n      name: 'session',\n      value: sessionCookie,\n      maxAge: SESSION_EXPIRATION / 1000, // maxAge is in seconds\n      path: '/',\n      secure: process.env.NODE_ENV === 'production', // Only send over HTTPS in production\n      httpOnly: true,\n      sameSite: 'strict',\n    });\n\n    return response;\n  } catch (error: any) {\n    console.error('Error creating session:', error);\n    \n    return NextResponse.json(\n      {\n        error: 'Failed to create session',\n        details: error.message || 'Unknown error'\n      },\n      { status: 401 }\n    );\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,8CAA8C;AAC9C,MAAM,qBAAqB,KAAK,KAAK,KAAK,KAAK;AAGxC,MAAM,UAAU;AAEhB,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,yCAAyC;QACzC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAElC,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,6CAA6C;QAC7C,MAAM,OAAO,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QACnB,MAAM,gBAAgB,MAAM,KAAK,mBAAmB,CAAC,SAAS;YAC5D,WAAW;QACb;QAEA,yCAAyC;QACzC,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;QAEnD,oDAAoD;QACpD,SAAS,OAAO,CAAC,GAAG,CAAC;YACnB,MAAM;YACN,OAAO;YACP,QAAQ,qBAAqB;YAC7B,MAAM;YACN,QAAQ,oDAAyB;YACjC,UAAU;YACV,UAAU;QACZ;QAEA,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,MAAM,OAAO,IAAI;QAC5B,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}