{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  // Skip middleware for auth-related paths\r\n  if (request.nextUrl.pathname.startsWith('/auth/') || \r\n      request.nextUrl.pathname === '/login' ||\r\n      request.nextUrl.pathname === '/signup' ||\r\n      request.nextUrl.pathname === '/confirm-signup') {\r\n    return NextResponse.next();\r\n  }\r\n\r\n  const session = request.cookies.get('session')?.value;\r\n\r\n  if (!session) {\r\n    return NextResponse.redirect(new URL('/login', request.url));\r\n  }\r\n\r\n  try {\r\n    // Simple JWT token verification using Firebase REST API\r\n    const verifyEndpoint = `https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=${process.env.NEXT_PUBLIC_FIREBASE_API_KEY}`;\r\n    const response = await fetch(verifyEndpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ idToken: session })\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!data.users?.[0]) {\r\n      throw new Error('Invalid token');\r\n    }\r\n\r\n    // Check email verification status\r\n    if (!data.users[0].emailVerified && !request.nextUrl.pathname.startsWith('/confirm-signup')) {\r\n      return NextResponse.redirect(new URL('/confirm-signup', request.url));\r\n    }\r\n\r\n    return NextResponse.next();\r\n  } catch (error) {\r\n    // Clear invalid session cookie\r\n    const response = NextResponse.redirect(new URL('/login', request.url));\r\n    response.cookies.delete('session');\r\n    return response;\r\n  }\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except:\r\n     * 1. /api routes\r\n     * 2. /_next (Next.js internals)\r\n     * 3. /fonts (inside /public)\r\n     * 4. /examples (inside /public)\r\n     * 5. all root files inside /public (e.g. /favicon.ico)\r\n     */\r\n    '/((?!api|_next|fonts|examples|[\\\\w-]+\\\\.\\\\w+).*)',\r\n  ],\r\n};\r\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAGO,eAAe,WAAW,OAAoB;IACnD,yCAAyC;IACzC,IAAI,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aACpC,QAAQ,OAAO,CAAC,QAAQ,KAAK,YAC7B,QAAQ,OAAO,CAAC,QAAQ,KAAK,aAC7B,QAAQ,OAAO,CAAC,QAAQ,KAAK,mBAAmB;QAClD,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,MAAM,UAAU,QAAQ,OAAO,CAAC,GAAG,CAAC,YAAY;IAEhD,IAAI,CAAC,SAAS;QACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;IAEA,IAAI;QACF,wDAAwD;QACxD,MAAM,iBAAiB,CAAC,8DAA8D,+EAA4C;QAClI,MAAM,WAAW,MAAM,MAAM,gBAAgB;YAC3C,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE,SAAS;YAAQ;QAC1C;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC,EAAE,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,kCAAkC;QAClC,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC,aAAa,IAAI,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,oBAAoB;YAC3F,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,mBAAmB,QAAQ,GAAG;QACrE;QAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B,EAAE,OAAO,OAAO;QACd,+BAA+B;QAC/B,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QACpE,SAAS,OAAO,CAAC,MAAM,CAAC;QACxB,OAAO;IACT;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}}]
}