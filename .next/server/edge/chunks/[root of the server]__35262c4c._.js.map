{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport admin from 'firebase-admin';\n\n// Initialize Firebase Admin\nconst getFirebaseAdmin = () => {\n  if (!admin.apps.length) {\n    const privateKey = process.env.FIREBASE_PRIVATE_KEY;\n    admin.initializeApp({\n      credential: admin.credential.cert({\n        projectId: process.env.FIREBASE_PROJECT_ID,\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n        privateKey: privateKey ? privateKey.replace(/\\\\n/g, '\\n') : '',\n      }),\n    });\n  }\n  return admin;\n};\n\nconst publicRoutes = ['/', '/login', '/signup', '/confirm-signup', '/auth/action', '/checkout', '/api/webhook/paddle'];\nconst apiRoutes = ['/api/subscriptions', '/api/webhook'];\n\nexport async function middleware(request: NextRequest) {\n  const response = NextResponse.next();\n\n  // Add CSP headers with all required domains\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.paddle.com https://*.datadoghq-browser-agent.com https://*.googletagmanager.com https://core.spreedly.com https://global.localizecdn.com https://js.stripe.com https://*.google.com https://apis.google.com https://*.firebaseio.com https://*.googleapis.com;\n    style-src 'self' 'unsafe-inline' https://*.paddle.com;\n    frame-src 'self' https://*.paddle.com http://localhost:* https://sandbox-buy.paddle.com https://buy.paddle.com https://accounts.google.com https://*.firebaseapp.com https://*.firebase.com;\n    frame-ancestors 'self' http://localhost:* https://*.paddle.com;\n    img-src 'self' data: https: blob:;\n    font-src 'self' https://*.paddle.com;\n    connect-src 'self' https://*.paddle.com https://*.firebaseio.com https://*.googleapis.com https://*.google-analytics.com https://firebaselogging-pa.googleapis.com https://*.cloudfunctions.net https://*.firebase.com https://*.firebaseapp.com wss://*.firebaseio.com https://identitytoolkit.googleapis.com;\n  `.replace(/\\s{2,}/g, ' ').trim();\n\n  response.headers.set('Content-Security-Policy', cspHeader);\n  \n  // Remove COOP and COEP headers completely to allow popups to work properly\n  response.headers.delete('Cross-Origin-Opener-Policy');\n  response.headers.delete('Cross-Origin-Embedder-Policy');\n\n  const { pathname } = request.nextUrl;\n\n  // Allow public routes and API routes\n  if (publicRoutes.includes(pathname) || apiRoutes.some(route => pathname.startsWith(route))) {\n    return response;\n  }\n\n  // Check for session token\n  const session = request.cookies.get('session')?.value;\n\n  if (!session) {\n    return NextResponse.redirect(new URL('/login', request.url));\n  }\n\n  // For API routes, we'll skip verification here as each API route will handle its own auth\n  // This is more efficient than verifying the token twice\n  if (pathname.startsWith('/api/')) {\n    return response;\n  }\n\n  try {\n    // We cannot use Firebase Admin directly in middleware due to Edge runtime limitations\n    // Instead, we'll use a lightweight verification approach\n    // The full verification will happen in API routes\n    \n    // Basic check - at least ensure the cookie exists and has proper format\n    // Real verification will happen in API routes\n    if (!session || session.split('.').length !== 3) {\n      throw new Error('Invalid session format');\n    }\n\n    // For protected routes, proceed with the user's session\n    // The actual verification will happen in the API routes\n    return response;\n  } catch (error) {\n    // Clear invalid session and redirect to login\n    const redirectResponse = NextResponse.redirect(new URL('/login', request.url));\n    redirectResponse.cookies.delete('session');\n    return redirectResponse;\n  }\n}\n\nexport const config = {\n  matcher: [\n    // Protect all routes except static assets and public files\n    '/((?!_next/static|favicon.ico|.*\\\\.[^/]*$).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEA,4BAA4B;AAC5B,MAAM,mBAAmB;IACvB,IAAI,CAAC,yJAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,EAAE;QACtB,MAAM,aAAa,QAAQ,GAAG,CAAC,oBAAoB;QACnD,yJAAA,CAAA,UAAK,CAAC,aAAa,CAAC;YAClB,YAAY,yJAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;gBAChC,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,aAAa,WAAW,OAAO,CAAC,QAAQ,QAAQ;YAC9D;QACF;IACF;IACA,OAAO,yJAAA,CAAA,UAAK;AACd;AAEA,MAAM,eAAe;IAAC;IAAK;IAAU;IAAW;IAAmB;IAAgB;IAAa;CAAsB;AACtH,MAAM,YAAY;IAAC;IAAsB;CAAe;AAEjD,eAAe,WAAW,OAAoB;IACnD,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI;IAElC,4CAA4C;IAC5C,MAAM,YAAY,CAAC;;;;;;;;;EASnB,CAAC,CAAC,OAAO,CAAC,WAAW,KAAK,IAAI;IAE9B,SAAS,OAAO,CAAC,GAAG,CAAC,2BAA2B;IAEhD,2EAA2E;IAC3E,SAAS,OAAO,CAAC,MAAM,CAAC;IACxB,SAAS,OAAO,CAAC,MAAM,CAAC;IAExB,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,qCAAqC;IACrC,IAAI,aAAa,QAAQ,CAAC,aAAa,UAAU,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,SAAS;QAC1F,OAAO;IACT;IAEA,0BAA0B;IAC1B,MAAM,UAAU,QAAQ,OAAO,CAAC,GAAG,CAAC,YAAY;IAEhD,IAAI,CAAC,SAAS;QACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;IAEA,0FAA0F;IAC1F,wDAAwD;IACxD,IAAI,SAAS,UAAU,CAAC,UAAU;QAChC,OAAO;IACT;IAEA,IAAI;QACF,sFAAsF;QACtF,yDAAyD;QACzD,kDAAkD;QAElD,wEAAwE;QACxE,8CAA8C;QAC9C,IAAI,CAAC,WAAW,QAAQ,KAAK,CAAC,KAAK,MAAM,KAAK,GAAG;YAC/C,MAAM,IAAI,MAAM;QAClB;QAEA,wDAAwD;QACxD,wDAAwD;QACxD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,8CAA8C;QAC9C,MAAM,mBAAmB,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC5E,iBAAiB,OAAO,CAAC,MAAM,CAAC;QAChC,OAAO;IACT;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP,2DAA2D;QAC3D;KACD;AACH"}}]
}